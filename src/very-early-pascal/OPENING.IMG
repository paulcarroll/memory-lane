{$I-}
  uses
    Crt,Dos;
  type
    ColorValue = record Rvalue,Gvalue,Bvalue: byte; end;
    PaletteType = array [0..255] of ColorValue;
  var
    ch: char;
    i: integer;
    p: PaletteType;
    screen: file;
    ok: boolean;

  procedure SetVGApalette(var tp: PaletteType);
    var regs: Registers;
  begin 
    with regs do
      begin
        AX:=$1012;
        BX:=0;
        CX:=256; 
        ES:=Seg(tp); DX:=Ofs(tp);
      end;
    Intr($10,regs);
  end; 

begin
  Inline($B8/$13/0/$CD/$10); { select video mode 13h (320x200 with 256 colors) }
  with p[0] do             
    begin
      Rvalue:=0;
      Gvalue:=0;
      Bvalue:=0;
    end;
  for i:=0 to 63 do 
    begin
      with p[i+1] do begin Rvalue:=i; Gvalue:=63-i; Bvalue:=0; end;
      with p[i+65] do begin Rvalue:=63-i; Gvalue:=0; Bvalue:=i; end;
      with p[i+129] do begin Rvalue:=0; Gvalue:=i; Bvalue:=63-i; end;
    end;
  SetVGApalette(p);
  Assign(screen,'Plasma.IMG');
  Reset(screen,1);
  ok:=(ioResult=0);
  if not ok then
  begin
       TextMode(LastMode);
       ClrScr;
       Writeln('Critcal error when initializing SCREEN.IMG!');
       Halt(1);
  end
  else
    BlockRead(screen,mem[$A000:0],$FA00);
  Close(screen);
  repeat
  until KeyPressed;
  TextMode(LastMode);
end.